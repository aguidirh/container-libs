# The containers configuration file specifies all of the available configuration
# options and command-line flags for container runtime tools like Podman & Buildah,
# but in a TOML format that can be easily modified and versioned.

# Please refer to containers.conf(5) for details of all configuration options.

[containers]

# List of additional devices. Specified as
# "<device-on-host>:<device-on-container>:<permissions>", for example: "--device=/dev/sdc:/dev/xvdc:rwm".
#If it is empty or commented out, only the devices
# defined in the container json file by the user/kube will be added.
# additional_devices = [
# ]

# Used to change the name of the default AppArmor profile of container engines. The default
# profile name is "container-default".
# apparmor_profile = "container-default"

# Default way to to create a cgroup namespace for the container
# Options are:
# `private` Create private Cgroup Namespace for the container.
# `host`    Share host Cgroup Namespace with the container.
# cgroupns="private"

# Cgroup management implementation used for the runtime.
# cgroup_manager = "systemd"

# List of default capabilities for containers. If it is empty or commented out,
# only the capabilities defined in the containers json file by the user/kube
# will be added.
# default_capabilities = [
#    "AUDIT_WRITE",
#    "CHOWN",
#    "DAC_OVERRIDE",
#    "FOWNER",
#    "FSETID",
#    "KILL",
#    "MKNOD",
#    "NET_BIND_SERVICE",
#    "NET_RAW",
#    "SETGID",
#    "SETPCAP",
#    "SETUID",
#    "SYS_CHROOT",
# ]

# A list of ulimits to be set in containers by default, specified as
# "<ulimit name>=<soft limit>:<hard limit>", for example:
# "nofile=1024:2048"
# See setrlimit(2) for a list of resource names.
# Any limit not specified here will be inherited from the process launching the container engine
# default_ulimits = [
# ]

# List of default sysctls. If it is empty or commented out, only the sysctls
# defined in the container json file by the user/kube will be added.
# default_sysctls = [
# ]

# Set default DNS servers.
# This option can be used to override the DNS configuration passed to the container. Typically this is necessary
# when the host DNS configuration is invalid for the container (e.g., 127.0.0.1).
# When  this  is  the case the --dns flags is necessary for every run.
# The  special  value none can be specified to disable creation of /etc/resolv.conf in the container.
# The /etc/resolv.conf file in the image will be used without changes.
# dns=

# Set default DNS options.
# dns-option=

# Set default DNS search domains.
# dns-search=

# Environment variable list for the conmon process, used for passing necessary
# environment variables to conmon or the runtime.
# env = [
#    "PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",
# ]

# Use host environment inside of the container. See Environment note below for precedence.
# env-host=false

# Path to OCI hooks directories for automatically executed hooks.
# hooks_dir = [
# “/usr/share/containers/oci/hooks.d”,
# ]

# Run an init inside the container that forwards signals and reaps processes.
# init = false

# Default proxy environment variables passed into the container.  The environment variables passed in  include
# http_proxy,  https_proxy,  ftp_proxy, no_proxy, and also the upper case versions of these.  This option is
# only needed when the host system must use a proxy but the container should not use any proxy.  Proxy envi‐
# ronment  variables  specified  for the container in any other way will override the values that would have
# been passed thru from the host.  (Other ways to specify the proxy for the container  include  passing  the
# values with the --env flag, or hard coding the proxy environment at container build time.)
# proxy environment variables are passed into the container
# http_proxy=true

# container engines use container separation using MAC(SELinux) labeling.
# label = true

# Tells container engines how to handle the builtin image volumes.
#  The options are: bind, tmpfs, or ignore (default bind)
#  · bind:  A directory is created inside the container state directory and bind mounted into the
#           container for the volumes.
#  · tmpfs: The volume is mounted onto the container as a tmpfs, which allows the users to create
#           content that disappears when the container is stopped.
#  · ignore: All volumes are just ignored and no action is taken.
# image-volume="bind"

# Default way to to create a IPC namespace (POSIX SysV IPC) for the container
# Options are:
# `private` Create private IPC Namespace for the container.
# `host`    Share host IPC Namespace with the container.
# ipcns="private"

# Logging  driver  for the container.  Available options: k8s-file and journald
# log-driver="k8s-file"

# Maximum size allowed for the container log file. Negative numbers indicate
# that no size limit is imposed. If it is positive, it must be >= 8192 to
# match/exceed conmon's read buffer. The file is truncated and re-opened so the
# limit is never exceeded.
# log_size_max = -1

# Default way to to create a Network namespace for the container
# Options are:
# `private` Create private Network Namespace for the container.
# `host`    Share host Network Namespace with the container.
# `none`    Containers do not use the netwoek
# netns="private"

# Create /etc/hosts for the container.  By default, container engines manage /etc/hosts,  adding  the
# container's  own  IP  address.
# no-host="false"

# Default way to to create a PID namespace for the container
# Options are:
# `private` Create private PID Namespace for the container.
# `host`    Share host PID Namespace with the container.
# pidns="private"

# Maximum number of processes allowed in a container.
# pids_limit = 2048

# Path to the seccomp.json profile which is used as the default seccomp profile
# for the runtime.
# seccomp_profile = "/usr/share/containers/seccomp.json"

# Size of /dev/shm. Specified as <number><unit>.
# Unit is optional and can be b (bytes), k (kilobytes), m (megabytes), or g (gigabytes). If the unit is omitted, the system uses bytes.
# shm_size = "65536k"

# Default way to to create a UTS namespace for the container
# Options are: # `private` Create private UTS Namespace for the container.
# `host`    Share host UTS Namespace with the container.
# utsns="private"

# The network table containers settings pertaining to the management of
# CNI plugins.
[network]

# Path to directory where CNI plugin binaries are located.
# cni_plugin_dirs = ["/usr/libexec/cni"]

# Path to the directory where CNI configuration files are located.
# network_config_dir = "/etc/cni/net.d/"

[libpod]

# Default transport method for pulling and pushing for images
# image_default_transport = "docker://"

# Environment variables to pass into conmon
# conmon_env_vars = [
#		"PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
# ]

# Paths to look for the Conmon container manager binary
# conmon_path = [
#	    "/usr/libexec/podman/conmon",
#	    "/usr/local/libexec/podman/conmon",
#	    "/usr/local/lib/podman/conmon",
#	    "/usr/bin/conmon",
#	    "/usr/sbin/conmon",
#	    "/usr/local/bin/conmon",
#	    "/usr/local/sbin/conmon"
# ]

# Container init binary
# init_path = "/usr/libexec/podman/catatonit"

# Directory for persistent libpod files (database, etc)
# By default, this will be configured relative to where containers/storage
# stores containers
# Uncomment to change location from this default
# static_dir = "/var/lib/containers/storage/libpod"

# Directory for temporary files. Must be tmpfs (wiped after reboot)
# tmp_dir = "/var/run/libpod"

# Whether to use chroot instead of pivot_root in the runtime
# no_pivot_root = false

# Default libpod namespace
# If libpod is joined to a namespace, it will see only containers and pods
# that were created in the same namespace, and will create new containers and
# pods in that namespace.
# The default namespace is "", which corresponds to no namespace. When no
# namespace is set, all containers and pods are visible.
# namespace = ""

# Default infra (pause) image name for pod infra containers
# infra_image = "k8s.gcr.io/pause:3.1"

# Default command to run the infra container
# infra_command = "/pause"

# Determines whether libpod will reserve ports on the host when they are
# forwarded to containers. When enabled, when ports are forwarded to containers,
# they are held open by conmon as long as the container is running, ensuring that
# they cannot be reused by other programs on the host. However, this can cause
# significant memory usage if a container has many ports forwarded to it.
# Disabling this can save memory.
# enable_port_reservation = true

# Default libpod support for container labeling
# label=true

# Number of locks available for containers and pods.
# If this is changed, a lock renumber must be performed (e.g. with the
# 'podman system renumber' command).
# num_locks = 2048

# Directory for libpod named volumes.
# By default, this will be configured relative to where containers/storage
# stores containers.
# Uncomment to change location from this default.
# volume_path = "/var/lib/containers/storage/volumes"

# Selects which logging mechanism to use for container engine events.  Valid values
# are `journald` or `file`.
# events_logger = "file"

# Specify the keys sequence used to detach a container.
# Format is a single character [a-Z] or a comma separated sequence of
# `ctrl-<value>`, where `<value>` is one of:
# `a-z`, `@`, `^`, `[`, `\`, `]`, `^` or `_`
#
# detach_keys = "ctrl-p,ctrl-q"

# Default OCI runtime
# runtime = "runc"

# List of the OCI runtimes that support --format=json.  When json is supported
# libpod will use it for reporting nicer errors.
# runtime_supports_json = ["crun", "runc"]

# Paths to look for a valid OCI runtime (runc, runv, etc)
[libpod.runtimes]
# runc = [
#		"/usr/bin/runc",
#		"/usr/sbin/runc",
#		"/usr/local/bin/runc",
#		"/usr/local/sbin/runc",
#		"/sbin/runc",
#		"/bin/runc",
#		"/usr/lib/cri-o-runc/sbin/runc",
# ]

# crun = [
#			"/usr/bin/crun",
#			"/usr/sbin/crun",
#			"/usr/local/bin/crun",
#			"/usr/local/sbin/crun",
#			"/sbin/crun",
#			"/bin/crun",
#			"/run/current-system/sw/bin/crun",
# ]

# The [libpod.runtimes] table MUST be the last thing in this file.
# (Unless another table is added)
# TOML does not provide a way to end a table other than a further table being
# defined, so every key hereafter will be part of [runtimes] and not the main
# config.

# The network table containers settings pertaining to the management of
# CNI plugins.
[network]

# Path to directory where CNI plugin binaries are located.
# cni_plugin_dirs = ["/usr/libexec/cni"]

# Path to the directory where CNI configuration files are located.
# network_config_dir = "/etc/cni/net.d/"
